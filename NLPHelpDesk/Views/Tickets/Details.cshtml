@model NLPHelpDesk.Data.Models.TicketDetailsViewModel
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using NLPHelpDesk.Data.Enums
@using static NLPHelpDesk.Helpers.Constants;

@{
    ViewData[VIEW_DATA_TITLE] = TITLE_DETAILS + Model.Ticket.TicketTitle;
}

<div class="primary-content-heading d-flex justify-content-between align-items-center mb-3">
    <div class="d-flex flex-column">
        <div class="d-flex align-items-center gap-3">
            <a class="btn btn-outline-dark btn-sm rounded-circle" 
               href="@(TempData[TEMP_DATA_RETURN_URL] != null ? TempData[TEMP_DATA_RETURN_URL].ToString() 
                         : Url.Action("Index", "Tickets"))">
                <i class="bi bi-arrow-left"></i>
            </a>
            <h2 class="mb-0">@ViewData[VIEW_DATA_TITLE]</h2>
            @if (Model.Ticket.HelpDeskCategory != null)
            {
                <div class="d-flex flex-wrap gap-2 mt-2">
                    <span class="badge badge-large bg-theme text-white shadow-sm fs-5" data-bs-toggle="tooltip"
                          title="This ticket is associated with @Model.Ticket.HelpDeskCategory.CategoryName.">
                        <i class="bi bi-shield-fill"></i> @Model.Ticket.HelpDeskCategory.CategoryName
                        </span>
                </div>
            }
            </div>
    </div>
    <div>
        @if (Model.IsOwner || Model.IsAssigned)
        {
            <a asp-action="Edit" class="btn btn-outline-theme" asp-route-ticketId="@Model.Ticket.TicketId">
                <i class="bi bi-pencil-square"></i>Edit
            </a>
        }
        @if (Model.IsAssigned)
        {
            <a asp-action="Completion" asp-route-ticketId="@Model.Ticket.TicketId" class="btn btn-primary"
               style="font-weight: 500; padding: 0.75rem 1.5rem; font-size: 1rem; border-radius: 0.25rem; transition: all 0.3s ease-in-out;">
                <i class="bi bi-check-square"></i> Complete
            </a>
        }
    </div></div>

    
<div class="row">
    <div class="col-md-7 mb-4">
        @* Details *@
        <div class="card shadow-sm">
            <div class="card-header bg-theme text-white">
                <h5 class="mb-0">Ticket Details</h5>
            </div>
            <div class="card-body scrollable" style="max-height: 45vh;">
                <dl class="row mb-0">
                    <dt class="col-md-4">Ticket ID:</dt>
                    <dd class="col-md-8">@Model.Ticket.TicketId</dd>
                    <dt class="col-md-4">Status:</dt>
                    <dd class="col-md-8">
                        <span class="badge rounded-pill status-badge bg-light text-dark border border-dark">
                            @Model.Ticket.Status
                        </span>
                    </dd>
                    <dt class="col-md-4">Priority:</dt>
                    <dd class="col-md-8 @(Model.Ticket.Priority == Priority.High ? "high-priority-text" : Model.Ticket.Priority == Priority.Medium ? "medium-priority-text" : Model.Ticket.Priority == Priority.Low ? "low-priority-text" : "")">
                        @Model.Ticket.Priority
                    </dd>
                    <dt class="col-md-4">@Html.DisplayNameFor(model => model.Ticket.IssueDate):</dt>
                    <dd class="col-md-8">@Html.DisplayFor(model => model.Ticket.IssueDate)</dd>
                    <dt class="col-md-4">Issuer:</dt>
                    <dd class="col-md-8">@Html.DisplayFor(model => model.Ticket.CreateUser.FirstName) @Html.DisplayFor(model => model.Ticket.CreateUser.LastName)</dd>
                    <dt class="col-md-4">@Html.DisplayNameFor(model => model.Ticket.TicketDescription)</dt>
                    <dd class="col-md-8 description">@Html.DisplayFor(model => model.Ticket.TicketDescription)</dd>
                </dl>
            </div>
        </div>
        
        @* Assign user *@
        <div class="card shadow-sm mt-2">
            <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Assigned Users</h5>
                @if (User.IsInRole(ROLE_TECHNICIAN))
                {
                    <a href="javascript:void(0);" class="d-flex align-items-center justify-content-center rounded-circle"
                       style="width: 40px; height: 40px; background-color: transparent;"
                       data-assign-user-url="@Url.Action("GetAssignableUsers", "Tickets", new { ticketId = Model.Ticket.TicketId, categoryId = Model.Ticket.HelpDeskCategoryId })"
                       onclick="handleAssignableUserModal(this)">
                        <i class="bi bi-plus-circle text-white" style="font-size: 1.5rem; cursor: pointer;"></i>
                    </a>
                }
            </div>
            <div class="card-body scrollable" style="max-height: 22vh;">
                @if (Model.Ticket.UserTickets.Any() == true)
                {
                    <ul class="list-group list-group-flush">
                        @foreach (var userTicket in Model.Ticket.UserTickets)
                        {
                            var user = userTicket.AppUser;
                            if (user != null)
                            {
                                var fullName = user.FirstName + " " + user.LastName;
                                var categoryName = user.HelpDeskCategory.CategoryName;
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <span class="font-weight-bold me-3">@fullName</span>
                                        <span class="badge bg-theme text-white rounded-pill">@categoryName</span>
                                    </div>
                                    @if (Model.IsAssigned)
                                    {
                                        <button class="btn btn-danger btn-sm delete-assign-user-btn"
                                                data-delete-url="@Url.Action("DeleteAssignedUser", "Tickets", new { userId = user.Id, ticketId = @Model.Ticket.TicketId })"
                                                data-reload-url="@Url.Action("Details", "Tickets", new { ticketId = @Model.Ticket.TicketId })">
                                            Delete
                                        </button> 
                                    }
                                </li>
                            }
                        }
                        </ul>
                }
                else
                {
                    <p class="text-muted mb-0">No users assigned.</p>
                }
            </div>
        </div>
    </div>
    
    @* Comment *@
    <div class="col-md-5 mb-4">
        <div class="card shadow-sm" style="max-height: 77vh;">
            <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Comments</h5>
                <span class="badge bg-light text-dark">@(Model.Ticket.Comments?.Count())</span>
            </div>
            <!-- Comments list section with scrollable area -->
            <div class="comment-container">
                <div class="comment-list">
                    @if (Model.Ticket.Comments != null && Model.Ticket.Comments.Any() == true)
                    {
                        foreach (var comment in Model.Ticket.Comments)
                        {
                            @await Html.PartialAsync("_CommentCard", comment)
                        }
                    }
                    else
                    {
                        <p>No comments yet.</p>
                    }
                </div>

                <!-- Comment input form at the bottom -->
                <div class="comment-input-container">
                    <form id="add-comment-form" enctype="multipart/form-data" class="needs-validation" action="@Url.Action("AddComment", "Tickets")" method="POST" onsubmit="addComment(event)">
                        @Html.AntiForgeryToken()
                        <div>
                            <label for="commentText" class="form-label fw-bold">Comment</label>
                            <textarea id="commentText" name="commentText" class="form-control" rows="3" maxlength="300" placeholder="Write your comment here..." required></textarea>
                            <div class="invalid-feedback">
                                Please enter your comment.
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-9">
                                <label for="file" class="form-label fw-bold">Attach File <span class="text-muted">(JPEG, PNG, ZIP, TXT, PDF)</span></label>
                                <input id="file" type="file" name="file" class="form-control" accept=".jpeg,.jpg,.png,.zip,.txt,.pdf"/>
                                <small class="text-muted">Max file size: 5MB</small>
                            </div>
                            @if (Model.IsOwner || Model.IsAssigned)
                            {
                                <div class="col-3 d-flex justify-content-center">
                                    <input type="hidden" name="ticketId" value="@Model.Ticket.TicketId"/>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="bi bi-chat-dots"></i> Comment
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </form>
                </div> 
            </div>
        </div>
    </div>
</div>

@if (Model.IsOwner)
{
    <div class="text-start">
        <a asp-action="Delete" class="btn btn-danger" asp-route-ticketId="@Model.Ticket.TicketId">
            <i class="bi bi-trash"></i> Delete
        </a>
    </div>
}
     

<!--Modal Window for add assign user-->
<div class="modal fade" id="assignableUserModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userModalLabel">Add User to Ticket</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="assignable-userList" class="d-flex flex-column gap-3 text-center">
                    <p>Loading user list...</p>
                </div>
            </div>
            <div class="modal-footer">
                <input type="hidden" id="assign-ticket-id" value="@Model.Ticket.TicketId" />
                <input type="hidden" id="assign-user-url" value="@Url.Action("AssignUser", "Tickets")" />
                <input type="hidden" id="reload-detail-url" value="@Url.Action("Details", "Tickets", new {ticketId = Model.Ticket.TicketId })" />
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" id="assignUserButton" class="btn btn-primary" disabled>Add User</button>
            </div>
        </div>
    </div>
</div>

<script src="/js/comment.js"></script>
<script src="/js/assignUser.js"></script>
